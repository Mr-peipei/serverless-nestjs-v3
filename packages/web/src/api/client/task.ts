/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * „Çµ„É≥„Éó„É´API
 * „Çµ„É≥„Éó„É´„ÅÆAPI
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  ListTasks200,
  ListTasksParams,
  Task,
  TaskBody,
  NotFoundResponse,
} from "../model";
import { customMutator } from "../custom-mutator";
import type { ErrorType } from "../custom-mutator";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * „Çø„Çπ„ÇØ„Çí‰∏ÄË¶ß„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „Çø„Çπ„ÇØ‰∏ÄË¶ßAPI
 */
export const listTasks = (params?: ListTasksParams, signal?: AbortSignal) => {
  return customMutator<ListTasks200>({
    url: `/tasks`,
    method: "get",
    params,
    signal,
  });
};

export const getListTasksQueryKey = (params?: ListTasksParams) => [
  `/tasks`,
  ...(params ? [params] : []),
];

export type ListTasksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTasks>>
>;
export type ListTasksQueryError = ErrorType<unknown>;

export const useListTasks = <
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = ErrorType<unknown>
>(
  params?: ListTasksParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listTasks>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTasksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTasks>>> = ({
    signal,
  }) => listTasks(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof listTasks>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * „Çø„Çπ„ÇØ„Çí‰ΩúÊàê„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „Çø„Çπ„ÇØ‰ΩúÊàêAPI
 */
export const postTask = (taskBody: TaskBody) => {
  return customMutator<Task>({
    url: `/tasks`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: taskBody,
  });
};

export type PostTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTask>>
>;
export type PostTaskMutationBody = TaskBody;
export type PostTaskMutationError = ErrorType<unknown>;

export const usePostTask = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTask>>,
    TError,
    { data: TaskBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTask>>,
    { data: TaskBody }
  > = (props) => {
    const { data } = props ?? {};

    return postTask(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postTask>>,
    TError,
    { data: TaskBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * „Çø„Çπ„ÇØ„ÇíÂèñÂæó„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „Çø„Çπ„ÇØÂèñÂæóAPI
 */
export const getTask = (taskId: string, signal?: AbortSignal) => {
  return customMutator<Task>({
    url: `/tasks/${taskId}`,
    method: "get",
    signal,
  });
};

export const getGetTaskQueryKey = (taskId: string) => [`/tasks/${taskId}`];

export type GetTaskQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTask>>
>;
export type GetTaskQueryError = ErrorType<NotFoundResponse>;

export const useGetTask = <
  TData = Awaited<ReturnType<typeof getTask>>,
  TError = ErrorType<NotFoundResponse>
>(
  taskId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskQueryKey(taskId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTask>>> = ({
    signal,
  }) => getTask(taskId, signal);

  const query = useQuery<Awaited<ReturnType<typeof getTask>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!taskId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * „Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „Çø„Çπ„ÇØÂâäÈô§API
 */
export const deleteTask = (taskId: string) => {
  return customMutator<void>({ url: `/tasks/${taskId}`, method: "delete" });
};

export type DeleteTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTask>>
>;

export type DeleteTaskMutationError = ErrorType<unknown>;

export const useDeleteTask = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTask>>,
    TError,
    { taskId: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTask>>,
    { taskId: string }
  > = (props) => {
    const { taskId } = props ?? {};

    return deleteTask(taskId);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteTask>>,
    TError,
    { taskId: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * „Çø„Çπ„ÇØ„ÇíÊõ¥Êñ∞„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „Çø„Çπ„ÇØÊõ¥Êñ∞API
 */
export const putTask = (taskId: string, taskBody: TaskBody) => {
  return customMutator<Task>({
    url: `/tasks/${taskId}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: taskBody,
  });
};

export type PutTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTask>>
>;
export type PutTaskMutationBody = TaskBody;
export type PutTaskMutationError = ErrorType<NotFoundResponse>;

export const usePutTask = <
  TError = ErrorType<NotFoundResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTask>>,
    TError,
    { taskId: string; data: TaskBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTask>>,
    { taskId: string; data: TaskBody }
  > = (props) => {
    const { taskId, data } = props ?? {};

    return putTask(taskId, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putTask>>,
    TError,
    { taskId: string; data: TaskBody },
    TContext
  >(mutationFn, mutationOptions);
};
