/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * „Çµ„É≥„Éó„É´API
 * „Çµ„É≥„Éó„É´„ÅÆAPI
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { User } from "../model";
import { customMutator } from "../custom-mutator";
import type { ErrorType } from "../custom-mutator";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„ÇíÂèñÂæó„Åô„ÇãAPI„Åß„Åô„ÄÇ
 * @summary „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂ÂèñÂæóAPI
 */
export const getMe = (signal?: AbortSignal) => {
  return customMutator<User>({ url: `/me`, method: "get", signal });
};

export const getGetMeQueryKey = () => [`/me`];

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = ErrorType<unknown>;

export const useGetMe = <
  TData = Awaited<ReturnType<typeof getMe>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({
    signal,
  }) => getMe(signal);

  const query = useQuery<Awaited<ReturnType<typeof getMe>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
